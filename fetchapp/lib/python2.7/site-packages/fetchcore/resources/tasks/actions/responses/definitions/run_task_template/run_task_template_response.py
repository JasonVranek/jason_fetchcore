# Copyright 2017 Fetch Robotics Inc.
# Author(s): Cappy Pitts

# Future
from __future__ import unicode_literals

# Fetchcore SDK Python
from fetchcore.definitions import ResponseStatus
from fetchcore.exceptions import ValidationError
from fetchcore.resources import Response
from fetchcore.utils import Number

# run_task_template
from .base_run_task_template import BaseRunTaskTemplate


class RunTaskTemplateResponse(BaseRunTaskTemplate, Response):
    """
    Fetchcore response to run a task template as a subtask.
    """

    def __init__(
            self, id=None, status=ResponseStatus.NEW, task_template_id_input=None,
            cascade_status_input=None, inputs=None, outputs=None, condition=None, task_id_output=None,
            created=None, modified=None, **kwargs
    ):
        """

        :param int id: The resource ID of the response.
        :param str status: Status of this response.
        :param int task_template_id_input: The ID of the task template to run.
        :param bool cascade_status_input: Whether to propagate the response's status to the action.
        :param inputs: Input parameters of the response.
        :param dict outputs: Output values of this response.
        :param condition: Condition to evaluate before this response can be executed.
        :param task_id_output: The id of the task generated by this response.
        :param created: The date and time this resource was created.
        :param modified: The date and time this resource was last modified.
        :type inputs: dict, None
        :type task_id_output: int, None
        :type condition: dict, .base_response.Condition, None
        :type created: str, ~datetime.datetime
        :type modified: str, ~datetime.datetime
        """
        super(RunTaskTemplateResponse, self).__init__(
            id=id, status=status, inputs=inputs, outputs=outputs, condition=condition,
            task_template_id_input=task_template_id_input, cascade_status_input=cascade_status_input,
            created=created, modified=modified, **kwargs)

        if outputs is None:
            self.task_id_output = task_id_output

    @property
    def task_id_output(self):
        """

        :return: The id of the task generated by this response.
        """
        try:
            return self.get_output('task_id')
        except KeyError:
            return None

    @task_id_output.setter
    def task_id_output(self, task_id_output):
        """

        :param task_id_output: The id of the task generated by this response.
        :raise fetchcore.exceptions.ValidationError: Thrown if task_id_output is not a positive integer or None.
        """
        if task_id_output is None:
            return
        elif Number.is_integer(task_id_output) and Number.is_finite_positive(task_id_output):
            self.set_output('task_id', task_id_output)
        else:
            raise ValidationError('Task ID should be a positive integer or None, not a %s.'
                                  % type(task_id_output).__name__)
